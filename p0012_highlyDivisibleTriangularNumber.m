%% Problem Description
%{ 
___________________________________________________________________________
Project Euler

PROBLEM NUMBER: 12 
PROBLEM TITLE: Highly Divisible Triangular Number
PROBLEM URL: https://projecteuler.net/problem=12
PROBLEM DESCRIPTION: The sequence of triangle numbers is generated by 
adding the natural numbers. So the 7th triangle number would be 
1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred 
divisors?

Andrew Soltisz, andysoltisz@gmail.com, 330-569-4138
START DATE: 04/26/2020
FINISH DATE: 
SOLUTION DESCRIPTION: 
___________________________________________________________________________
%}

clear variables
close all
clc

%% Solution Script

%% Approach 1 - timed (runtime = 260)
% tic
% 
% count = 2;
% solution = 3;
% divs = numel(divisors(solution));
% maxDivs = divs;
% prog = waitbar(maxDivs/500,sprintf('Number: %.0f\nMaxDivs: %.0f\nRun Time: %.0f\nProgress:',solution,maxDivs,toc));
% 
% while  divs < 500
%     count = count + 1;
%     solution = solution + count;
%     if mod(solution,2) == 0
%         divs = numel(divisors(solution));
%         if divs > maxDivs
%             maxDivs = divs;
%         end
%     end
%     waitbar(maxDivs/500,prog,sprintf('Number: %.0f\nMaxDivs: %.0f\nRun Time: %.0f\nProgress:',solution,maxDivs,toc));
% end
% close(prog);
% 
% toc

%% Approach 1 - No overhead (runtime = 200s)
tic

numCount = 2;
solution = 3;
divCount = numel(divisors(solution));

while  divCount < 500
    numCount = numCount + 1;
    solution = solution + numCount;
    if mod(solution,2) == 0
        divCount = numel(divisors(solution));
    end
end

toc
